$date
	Sun Mar  3 02:42:21 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Single_Cycle_Top_TB $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module single_cycle_top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # RegWrite $end
$var wire 32 $ Read_data [31:0] $end
$var wire 32 % RD_Instr [31:0] $end
$var wire 32 & RD1_Top [31:0] $end
$var wire 32 ' PC_Top [31:0] $end
$var wire 32 ( PCPlus4 [31:0] $end
$var wire 32 ) Imm_Ext_Top [31:0] $end
$var wire 2 * ImmSrc [1:0] $end
$var wire 1 + ALUSrc $end
$var wire 32 , ALUResult_Top [31:0] $end
$var wire 3 - ALUControl_Top [2:0] $end
$scope module Instmemobj $end
$var wire 1 " rst $end
$var wire 32 . RD [31:0] $end
$var wire 32 / A [31:0] $end
$upscope $end
$scope module add $end
$var wire 32 0 b [31:0] $end
$var wire 32 1 c [31:0] $end
$var wire 32 2 a [31:0] $end
$upscope $end
$scope module aluobj $end
$var wire 1 3 C $end
$var wire 1 4 V $end
$var wire 32 5 a_and_b [31:0] $end
$var wire 32 6 a_or_b [31:0] $end
$var wire 32 7 not_b [31:0] $end
$var wire 32 8 result [31:0] $end
$var wire 32 9 sum [31:0] $end
$var wire 32 : slt [31:0] $end
$var wire 1 ; cout $end
$var wire 3 < alucontrol [2:0] $end
$var wire 32 = alu_mux2 [31:0] $end
$var wire 32 > alu_mux1 [31:0] $end
$var wire 1 ? Z $end
$var wire 1 @ N $end
$var wire 32 A B [31:0] $end
$var wire 32 B A [31:0] $end
$upscope $end
$scope module ctrltopobj $end
$var wire 7 C Op [6:0] $end
$var wire 3 D funct3 [2:0] $end
$var wire 7 E funct7 [6:0] $end
$var wire 1 F zero $end
$var wire 1 G ResultSrc $end
$var wire 1 # RegWrite $end
$var wire 1 H PCSrc $end
$var wire 1 I MemWrite $end
$var wire 2 J ImmSrc [1:0] $end
$var wire 1 + ALUSrc $end
$var wire 2 K ALUOp [1:0] $end
$var wire 3 L ALUControl [2:0] $end
$scope module aludcoderobj $end
$var wire 3 M funct3 [2:0] $end
$var wire 7 N funct7 [6:0] $end
$var wire 7 O op5 [6:0] $end
$var wire 2 P concat [1:0] $end
$var wire 2 Q ALUOp [1:0] $end
$var wire 3 R ALUControl [2:0] $end
$upscope $end
$scope module maindcdrobj $end
$var wire 1 H PCSrc $end
$var wire 7 S op [6:0] $end
$var wire 1 F zero $end
$var wire 1 G ResultSrc $end
$var wire 1 # RegWrite $end
$var wire 1 I MemWrite $end
$var wire 2 T ImmSrc [1:0] $end
$var wire 1 U Branch $end
$var wire 1 + ALUSrc $end
$var wire 2 V ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module data_memobj $end
$var wire 32 W A [31:0] $end
$var wire 32 X WD [31:0] $end
$var wire 1 Y WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 Z RD [31:0] $end
$upscope $end
$scope module pcobj $end
$var wire 32 [ PC_NEXT [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 \ PC [31:0] $end
$upscope $end
$scope module regfileobj $end
$var wire 5 ] A1 [4:0] $end
$var wire 5 ^ A2 [4:0] $end
$var wire 5 _ A3 [4:0] $end
$var wire 32 ` WD3 [31:0] $end
$var wire 1 # WE3 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 a RD2 [31:0] $end
$var wire 32 b RD1 [31:0] $end
$upscope $end
$scope module signextendobj $end
$var wire 32 c In [31:0] $end
$var wire 32 d Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
bz ^
b0 ]
b0 \
b100 [
b0 Z
zY
bz X
b0 W
b0 V
0U
b0 T
b0 S
b0 R
b0 Q
bz P
bz O
bz N
b0 M
b0 L
b0 K
b0 J
0I
0H
0G
zF
bz E
b0 D
b0 C
b0 B
b0 A
0@
1?
b0 >
b0 =
b0 <
0;
b0 :
b0 9
b0 8
b11111111111111111111111111111111 7
b0 6
b0 5
04
03
b0 2
b100 1
b100 0
b0 /
b0 .
b0 -
b0 ,
0+
b0 *
b0 )
b100 (
b0 '
b0 &
b0 %
b0 $
0#
0"
0!
$end
#50
1!
#100
b11111111111111111111111111111100 >
b11 7
1#
1+
b100000 5
04
b11111111111111111111111111111100 )
b11111111111111111111111111111100 A
b11111111111111111111111111111100 d
1G
0@
b10 D
b10 M
b11 C
b11 S
b110 _
b1001 ]
b11100 ,
b11100 8
b11100 W
b11100 =
b0 :
13
b11111111110001001010001100000011 %
b11111111110001001010001100000011 .
b11111111110001001010001100000011 c
b110000 $
b110000 Z
b110000 `
b11100 9
1;
0?
b11111111111111111111111111111100 6
b100000 &
b100000 B
b100000 b
bx a
0!
1"
#150
x4
x@
bx $
bx Z
bx `
bx -
bx <
bx L
bx R
bx ,
bx 8
bx W
bx =
b0x :
x3
bx >
bx 7
x#
x+
xH
bx 9
x;
x?
bx 6
bx 5
bx )
bx A
bx d
xI
xG
xU
bx *
bx J
bx T
bx K
bx Q
bx V
bx &
bx B
bx b
bx D
bx M
bx C
bx S
bx _
bx ]
bx %
bx .
bx c
b1000 (
b1000 1
b1000 [
b100 '
b100 /
b100 2
b100 \
1!
#200
0!
#250
b1100 (
b1100 1
b1100 [
b1000 '
b1000 /
b1000 2
b1000 \
1!
#300
0!
#350
b10000 (
b10000 1
b10000 [
b1100 '
b1100 /
b1100 2
b1100 \
1!
#400
0!
